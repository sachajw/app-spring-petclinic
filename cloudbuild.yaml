# Cloud Build configuration optimized for Spring Boot + Buildpacks
# This configuration uses Google Cloud Buildpacks to automatically detect and build Spring Boot applications
#
# Build Trigger Configuration:
# - Triggers on: Push to 'main' branch
# - Source: GitHub repository
# - Build config: This cloudbuild.yaml file
#
# To create the trigger, run:
# gcloud builds triggers create github \
#   --repo-name=app-spring-petclinic \
#   --repo-owner=[YOUR_GITHUB_USERNAME] \
#   --branch-pattern="^main$" \
#   --build-config=cloudbuild.yaml \
#   --description="Build and deploy Spring PetClinic on main branch push"

steps:
  # Ensure Maven wrapper is executable (buildpack requirement)
  - name: "gcr.io/cloud-builders/git"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        chmod +x ./mvnw
        ls -la mvnw pom.xml
        echo "Project structure verified for buildpack detection"
        echo "Java version in pom.xml: $(grep -A1 '<java.version>' pom.xml || echo 'Not found')"
    id: "prepare-build"

  # Build the application using Google Cloud Buildpacks
  # Buildpacks will auto-detect: Java version, Maven build tool, Spring Boot framework
  - name: "gcr.io/k8s-skaffold/pack"
    entrypoint: "pack"
    args:
      - "build"
      - "${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPOSITORY}/${_SERVICE_NAME}:${SHORT_SHA}"
      - "--builder=gcr.io/buildpacks/builder:latest" # Google Cloud Buildpack builder
      - "--run-image=gcr.io/buildpacks/google-22/run:latest" # Ubuntu 22.04 base runtime
      - "--path=."
      - "--env=GOOGLE_RUNTIME_VERSION=21" # Force Java 21 (matches your buildlog)
      - "--env=MAVEN_OPTS=-Dhttp.keepAlive=false" # Maven HTTP optimization
      - "--env=BP_JVM_VERSION=21" # Buildpack JVM version
      - "--env=BP_MAVEN_BUILD_ARGUMENTS=clean package -DskipTests --batch-mode" # Custom Maven args
      - "--env=BPL_JVM_THREAD_COUNT=default" # JVM thread configuration
      - "--env=BPL_SPRING_CLOUD_BINDINGS_DISABLED=true" # Disable Spring Cloud bindings
      - "--clear-cache" # Force fresh build
    id: "build-image"
    waitFor: ["prepare-build"]

  # Push the image to Artifact Registry
  - name: "gcr.io/cloud-builders/docker"
    args:
      - "push"
      - "${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPOSITORY}/${_SERVICE_NAME}:${SHORT_SHA}"
    id: "push-image"
    waitFor: ["build-image"]

  # Verify the built image contains expected buildpack metadata
  - name: "gcr.io/cloud-builders/docker"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        echo "Inspecting buildpack metadata..."
        docker inspect ${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPOSITORY}/${_SERVICE_NAME}:${SHORT_SHA} | grep -A 10 "io.buildpacks"
        echo "Image build complete and verified"
    id: "verify-image"
    waitFor: ["push-image"]

  # Deploy to Cloud Run with Spring Boot optimized settings
  - name: "gcr.io/google.com/cloudsdktool/cloud-sdk:slim"
    entrypoint: "gcloud"
    args:
      - "run"
      - "deploy"
      - "${_SERVICE_NAME}"
      - "--image=${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPOSITORY}/${_SERVICE_NAME}:${SHORT_SHA}"
      - "--region=${_REGION}"
      - "--platform=managed"
      - "--allow-unauthenticated"
      - "--port=8080"
      - "--memory=2Gi"
      - "--cpu=2"
      - "--min-instances=0"
      - "--max-instances=10"
      - "--concurrency=80"
      - "--timeout=300"
      - "--set-env-vars=SPRING_PROFILES_ACTIVE=default,JAVA_TOOL_OPTIONS=-XX:MaxRAMPercentage=75.0,NEW_RELIC_APP_NAME=${_SERVICE_NAME},NEW_RELIC_ENVIRONMENT=production,NEW_RELIC_LICENSE_KEY=${_NEW_RELIC_LICENSE_KEY}"
    id: "deploy-service"
    waitFor: ["verify-image"]

# Substitution variables - customize for your environment
substitutions:
  _REGION: "europe-west3" # GCP region for deployment
  _REPOSITORY: "cloud-run-source-deploy" # Artifact Registry repository name
  _SERVICE_NAME: "spring-petclinic" # Cloud Run service name
  _NEW_RELIC_LICENSE_KEY: "" # Add your New Relic license key here or use a trigger substitution

# Build configuration optimized for buildpack builds
options:
  machineType: "E2_HIGHCPU_8" # Higher CPU for faster Maven builds
  substitutionOption: "ALLOW_LOOSE"
  logging: "CLOUD_LOGGING_ONLY" # Better logging for buildpack debugging

# Extended timeout for buildpack download and Maven dependency resolution
timeout: "1800s"
# Additional buildpack-specific environment variables can be set here
# Available buildpack environment variables:
# - GOOGLE_RUNTIME_VERSION: Java runtime version
# - BP_JVM_VERSION: JVM version for buildpack
# - BP_MAVEN_BUILD_ARGUMENTS: Custom Maven build arguments
# - MAVEN_OPTS: Maven JVM options
